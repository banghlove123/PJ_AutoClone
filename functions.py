import uiautomator2 as u2
import time


class Bot:
    def __init__(self, log_callback=None):
        self.d = u2.connect()
        self.log_callback = log_callback
        self.log("üì≤ Connected to device")
        time.sleep(3)
        self.d.shell("settings put system accelerometer_rotation 0")   
        self.d.shell("settings put system screen_brightness_mode 0")
        self.d.shell("settings put system screen_brightness 255")
        self.d.shell("settings put system screen_off_timeout 1800000")
        
        

    
    def log(self, message):
        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà UI
        if self.log_callback:
            self.log_callback(message)
        print(message)

    def wait_for_text(self, text, timeout=5):
        start_time = time.time()
        while not self.d(text=text).exists:
            if time.time() - start_time > timeout:
                self.log(f"‚è≥ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤: ‡πÑ‡∏°‡πà‡∏û‡∏ö '{text}'")
                return False
            time.sleep(2)
        self.log(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {text}")
        return True

    def click(self, text):
        self.d.shell("settings put system accelerometer_rotation 0")   
        self.d.shell("settings put system screen_brightness_mode 0")
        time.sleep(1)
        element = self.d(text=text)
        if element.exists:
            bounds = element.info["bounds"]
            self.log(f"üëâ ‡∏Ñ‡∏•‡∏¥‡∏Å: {text} | ‡∏û‡∏¥‡∏Å‡∏±‡∏î: {bounds}")
            element.click()
            time.sleep(1)
            return True
        else:
            self.log(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {text}")
            return False

    def open_settings_and_search(self, query):
        
        self.d.shell("pm clear com.android.settings")
        self.d.app_start("com.android.settings")
        self.d.press("search")
        self.d.send_keys(query)
        time.sleep(1)
        self.log(f"üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {query}")

    def optimize_gotsync(self):
        # """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GOTSync ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î'"""
        self.open_settings_and_search("GOTSync1")
        steps = ["GOTSync", "‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà", "‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î"]
        for step in steps:
            if not self.wait_for_text(step):
                return False
            self.click(step)
        self.log("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GOTSync ‡πÄ‡∏õ‡πá‡∏ô '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True

    def configure_code(self,text):
        self.d.app_start("th.co.gosoft.scmobile.got.gotsync")
        if self.wait_for_text("‡∏ï‡∏Å‡∏•‡∏á"):
            self.click("‡∏ï‡∏Å‡∏•‡∏á")
        time.sleep(5)
        self.d.send_keys(text, clear=True)

    def enable_unknown_sources(self):
        # """‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å"""
        self.open_settings_and_search("‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å")
        if self.wait_for_text("‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©"):
            self.click("‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©")
            if self.wait_for_text("‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å"):
                self.click("‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å")
                time.sleep(5)
                if self.wait_for_text("SOTI MobiControl"):
                    self.click("SOTI MobiControl")
        self.log("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    def add_language(self):
        # """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏©‡∏≤ English (United States)"""
        self.open_settings_and_search("‡∏†‡∏≤‡∏©‡∏≤")
        steps = [
            "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
            "‡∏†‡∏≤‡∏©‡∏≤",
            "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏©‡∏≤",
            "English",
            "United States",
            "‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
        ]
        for step in steps:
            if not self.wait_for_text(step):
                return False
            self.click(step)
        self.log("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏©‡∏≤ English (United States) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True

    def configure_side_button(self):
        # """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á"""
        self.open_settings_and_search("‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á")

        steps = ["‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á", "‡πÄ‡∏°‡∏ô‡∏π‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á"]

        for step in steps:
            if not self.wait_for_text(step):
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö: {step}")
                return False  # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏û‡∏ö
            self.click(step)

        print("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True  # ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏∏‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô

    def configure_keyboard(self):
        # """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå Gboard"""
        self.open_settings_and_search("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")

        steps = [
            "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
            "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô",
            "Gboard",
            "‡∏Ñ‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå",
            "‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å",
        ]

        for step in steps:
            if not self.wait_for_text(step):
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö: {step}")
                return False  # ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏û‡∏ö
            self.click(step)

        # ‡∏Å‡∏î Back ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå
        self.d.press("back")

        # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô
        extra_steps = ["‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô", "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏¥‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå"]

        for step in extra_steps:
            if not self.wait_for_text(step):
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö: {step}")
                return False
            self.click(step)

        print("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå Gboard ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True  # ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏∏‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô

    def security(self):
        self.d.shell("adb shell")
        self.d.shell("locksettings set-pin 123456")  # ‡∏•‡πá‡∏≠‡∏Ñ
        self.d.shell("am start -a android.settings.WIFI_SETTINGS")  # ‡∏´‡∏ô‡πâ‡∏≤ wifi
        self.d.shell("settings put system accelerometer_rotation 1")
        self.d.shell("pm uninstall com.github.uiautomator")  # ‡∏•‡∏ö‡πÅ‡∏≠‡∏õ
        print(f"‚úÖ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
